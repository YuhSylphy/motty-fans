{"version":3,"file":"static/js/profile.44f54944.chunk.js","mappings":"yMAOMA,GAAeC,E,SAAAA,IAAY,CAChCC,KAAM,UACNC,aAAc,GACdC,SAAU,CACTC,KAAM,gBAOOC,EAAqBN,EAArBM,Q,GAAqBN,EAAZO,Q,UCRxB,SAASC,IACR,OAAO,wCAGR,SAASC,IACR,OAA4CC,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,GAAWC,EAAAA,EAAAA,MAQjB,OAPAC,EAAAA,EAAAA,YAAU,WACLJ,IACHE,EAASG,EAAAA,QACTJ,GAAkB,MAEjB,CAACD,KAEG,mC,qCCYKM,EAAQ,IAAIC,EAAAA,EAAkBC,EAAAA,GCV3C,IAEaC,GAAOC,EAAAA,EAAAA,IAFI,SAACC,GAAD,OAAcL,MCtBtCM,EAAAA,EAAAA,IAAaH,GACb,MHsBO,WACN,OACC,SAAC,EAAAI,SAAD,CAAUC,UAAU,SAACjB,EAAD,IAApB,UACC,SAACC,EAAD","sources":["features/profile/core/ducks.ts","features/profile/component/Profile.tsx","../node_modules/rxjs/src/internal/observable/never.ts","features/profile/core/epic.ts","features/profile/lazy.ts"],"sourcesContent":["import {\n\tcreateSlice,\n\t// PayloadAction\n} from '@reduxjs/toolkit';\n\nexport type ProfileState = Record<string, never>;\n\nconst profileSlice = createSlice({\n\tname: 'profile',\n\tinitialState: {} as ProfileState,\n\treducers: {\n\t\tinit: () => {},\n\t\t// setList: (draft, action: PayloadAction<ProfileState['list']>) => {\n\t\t// \tdraft.list = action.payload;\n\t\t// },\n\t},\n});\n\nexport const { actions, reducer } = profileSlice;\nexport type ProfileAction = ReturnType<typeof actions[keyof typeof actions]>;\n","import React, {\n\tSuspense,\n\t// useCallback,\n\tuseEffect,\n\t// useMemo,\n\tuseState,\n} from 'react';\nimport { useAppDispatch } from 'src/util';\nimport { profileActions } from '..';\n\nfunction Loader() {\n\treturn <div>Loading...</div>;\n}\n\nfunction ProfileContainer() {\n\tconst [notInitialized, setNotInitialized] = useState(true);\n\tconst dispatch = useAppDispatch();\n\tuseEffect(() => {\n\t\tif (notInitialized) {\n\t\t\tdispatch(profileActions.init());\n\t\t\tsetNotInitialized(false);\n\t\t}\n\t}, [notInitialized]);\n\n\treturn <div>dummy</div>;\n}\n\nexport function Profile() {\n\treturn (\n\t\t<Suspense fallback={<Loader />}>\n\t\t\t<ProfileContainer />\n\t\t</Suspense>\n\t);\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n *\n * Emit the number 7, then never emit anything else (not even complete)\n *\n * ```ts\n * import { NEVER, startWith } from 'rxjs';\n *\n * const info = () => console.log('Will not be called');\n *\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe({\n *   next: x => console.log(x),\n *   error: info,\n *   complete: info\n * });\n * ```\n *\n * @see {@link Observable}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Replaced with the {@link NEVER} constant. Will be removed in v8.\n */\nexport function never() {\n  return NEVER;\n}\n","import { combineEpics } from 'redux-observable';\n\nimport type { Epic } from 'src/app';\n// import { withIndicator } from 'src/util';\n\n// import { profileActions } from '..';\nimport { NEVER } from 'rxjs';\n\n// export const fetchDefsEpic: Epic = (action$) =>\n// \taction$.pipe(\n// \t\tfilter(videosActions.init.match),\n// \t\twithIndicator('videos/fetch', async () =>\n// \t\t\tvideosActions.setList(await fetchVideoDefs())\n// \t\t)\n// \t);\n\n// export const setDefaultConditionEpic: Epic = (action$) =>\n// \taction$.pipe(\n// \t\tfilter(videosActions.init.match),\n// \t\twithIndicator('videos/default-condition', async () =>\n// \t\t\tvideosActions.setConditionDateFrom(\n// \t\t\t\tDateTime.now().minus({ months: 3 }).toMillis()\n// \t\t\t)\n// \t\t)\n// \t);\n\nconst dummyEpic: Epic = (_action$) => NEVER;\n\nexport const epic = combineEpics(dummyEpic);\n","import { registerEpic } from 'src/app';\nimport { Profile } from './component/Profile';\nimport { epic } from './core/epic';\n\nregisterEpic(epic);\nexport default Profile;\n"],"names":["profileSlice","createSlice","name","initialState","reducers","init","actions","reducer","Loader","ProfileContainer","useState","notInitialized","setNotInitialized","dispatch","useAppDispatch","useEffect","profileActions","NEVER","Observable","noop","epic","combineEpics","_action$","registerEpic","Suspense","fallback"],"sourceRoot":""}